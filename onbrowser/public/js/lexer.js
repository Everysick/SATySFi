// Generated by BUCKLESCRIPT VERSION 1.0.1 , PLEASE EDIT WITH CARE
'use strict';

var Range           = require("./range");
var Stacklist       = require("./stacklist");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions");
var Pervasives      = require("bs-platform/lib/js/pervasives");
var Lexing          = require("bs-platform/lib/js/lexing");
var Block           = require("bs-platform/lib/js/block");
var Curry           = require("bs-platform/lib/js/curry");
var Caml_array      = require("bs-platform/lib/js/caml_array");
var $$String        = require("bs-platform/lib/js/string");
var Caml_string     = require("bs-platform/lib/js/caml_string");

var LexError = Caml_exceptions.create("Lexer.LexError");

var line_no = [1];

var end_of_previousline = [0];

var next_state = [/* STATE_NUMEXPR */0];

var first_state = [/* STATE_NUMEXPR */0];

var after_literal_state = [/* STATE_STREXPR */1];

var after_comment_state = [/* STATE_STREXPR */1];

var ignore_space = [/* true */1];

var openqtdepth = [0];

var numdepth = [0];

var strdepth = [0];

var numdepth_stack = [Stacklist.empty];

var strdepth_stack = [Stacklist.empty];

function increment(rfn) {
  rfn[0] = rfn[0] + 1 | 0;
  return /* () */0;
}

function decrement(rfn) {
  rfn[0] = rfn[0] - 1 | 0;
  return /* () */0;
}

function get_start_pos(lexbuf) {
  return Lexing.lexeme_start(lexbuf) - end_of_previousline[0] | 0;
}

function get_end_pos(lexbuf) {
  return Lexing.lexeme_end(lexbuf) - end_of_previousline[0] | 0;
}

function get_pos(lexbuf) {
  var pos_from = get_start_pos(lexbuf);
  var pos_to = get_end_pos(lexbuf);
  return Range.make(line_no[0], pos_from, pos_to);
}

function error_reporting(lexbuf, errmsg) {
  var column_from = get_start_pos(lexbuf);
  var column_to = get_end_pos(lexbuf);
  return "at line " + (Pervasives.string_of_int(line_no[0]) + (", column " + (Pervasives.string_of_int(column_from) + ("-" + (Pervasives.string_of_int(column_to) + (":\n    " + errmsg))))));
}

function increment_line(lexbuf) {
  end_of_previousline[0] = Lexing.lexeme_end(lexbuf);
  line_no[0] = line_no[0] + 1 | 0;
  return /* () */0;
}

function increment_line_for_each_break(lexbuf, str, _num) {
  while(true) {
    var num = _num;
    if (num >= str.length) {
      return /* () */0;
    }
    else {
      var match = Caml_string.get(str, num);
      if (match === 10) {
        increment_line(lexbuf);
      }
      _num = num + 1 | 0;
      continue ;
      
    }
  };
}

function reset_to_numexpr() {
  first_state[0] = /* STATE_NUMEXPR */0;
  next_state[0] = first_state[0];
  ignore_space[0] = /* true */1;
  line_no[0] = 1;
  end_of_previousline[0] = 0;
  openqtdepth[0] = 0;
  numdepth[0] = 0;
  strdepth[0] = 0;
  numdepth_stack[0] = Stacklist.empty;
  strdepth_stack[0] = Stacklist.empty;
  return /* () */0;
}

function reset_to_strexpr() {
  first_state[0] = /* STATE_STREXPR */1;
  next_state[0] = first_state[0];
  ignore_space[0] = /* true */1;
  line_no[0] = 1;
  end_of_previousline[0] = 0;
  openqtdepth[0] = 0;
  numdepth[0] = 0;
  strdepth[0] = 0;
  numdepth_stack[0] = Stacklist.empty;
  strdepth_stack[0] = Stacklist.empty;
  return /* () */0;
}

var __ocaml_lex_tables = /* record */[
  /* lex_base */"\0\0\xd2\xff\xd3\xffM\0Z\0\xc0\0\xda\0\xd9\xff\xda\xff\xdc\xff\x05\0\x01\0\xe3\xff\x1a\0K\0\\\0W\0\xed\xff\xee\xffW\0\xf0\xff\xf1\xff\x14\x016\0\xf4\xff\xf5\xff\xf6\xff\xf7\xffn\0\xfa\xff\x86\x01\xfd\xff\xfe\xff\xff\xff\xf9\xff\xfc\xff\x88\x01\xe4\xff\xf8\xff\x83\x01\xd3\x01\xe2\xff\xec\xff\x88\0\xe1\xff\xe9\xff\xea\xff\xe0\xff\xe7\xff\xe5\xff\xde\xff\xdd\xff!\x02\x93\x02\x96\x02\xf4\xffV\0\xb3\x02\x0e\x03\x8d\0\xfc\xff\xfd\xff\xfe\xff\x84\x03\x87\x03\xff\xff\x8b\x03\xf7\xff\xdc\x03*\x04x\x04\xea\x04\xf4\xff\xf5\xff\xf6\xffX\0\xf8\xff=\0U\x03\xc5\x04\xfd\xff\xfe\xff\xff\xff%\x05\x8a\x05\xf9\xff\x11\x01\xfc\xff\xfd\xff\xfe\xffZ\0\xde\0\xfd\xff\xfe\xff\xff\xff",
  /* lex_backtrk */"\xff\xff\xff\xff\xff\xff+\0*\0)\0-\0\xff\xff\xff\xff\xff\xff'\0 \0\xff\xff-\0\x19\0\x17\0\x14\0\xff\xff\xff\xff\x10\0\xff\xff\xff\xff-\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff$\0\xff\xff\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\r\0\r\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff(\0\xff\xff\f\0\xff\xff\n\0\r\0\r\0\x06\0\xff\xff\xff\xff\xff\xff\x05\0\x04\0\xff\xff\xff\xff\xff\xff\x07\0\x07\0\t\0\xff\xff\xff\xff\xff\xff\xff\xff\b\0\xff\xff\x05\0\x0b\0\x0b\0\xff\xff\xff\xff\xff\xff\x03\0\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff",
  /* lex_default */"\x01\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff6\x006\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xffH\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\xff\xff\xff\xff\0\0W\0\0\0\0\0\0\0\xff\xff\\\0\0\0\0\0\0\0",
  /* lex_trans */"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0 \0\x1f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0 \0\x0b\x002\0\x15\0\0\0!\0\r\0\x06\0\x1e\0\x1d\0\x12\0\x14\0\t\0\x13\0\x07\0\x11\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\n\0\x19\0\x0f\0\x10\0\x0e\x003\x001\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x1b\0\x16\0\x1a\0\f\0\b\0\x17\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x18\0\x1c\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x04\x000\0,\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0*\0)\0\x17\0&\0+\0-\0.\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0/\x008\0;\0K\0U\0Z\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0^\0\0\0%\0\0\0\0\0\x05\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0Y\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0\0\0\0\0Z\0\0\0\0\0\0\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0$\0$\0$\0$\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0$\0\0\0$\0\0\0\0\0\0\0\0\0\0\0\0\0#\0'\0#\0\0\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0]\0\0\0\0\0\0\0\0\0\0\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0\0\0\0\0(\0\0\0\"\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0\0\0\0\0\0\0\0\0X\0\0\0\0\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0\0\0\0\0\0\0\0\0\0\0\0\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\x004\0\0\0\0\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\0\0\0\0\0\0\0\0\0\0\0\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\0?\0@\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0?\0\0\0\0\0\xff\xff\0\0A\0\0\0\0\0\xff\xff\0\0;\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x009\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0:\0\0\0\0\0\xff\xff8\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0>\0<\0=\0\xff\xff\xff\xff\xff\xffF\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0C\0C\0C\0C\0C\0C\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0C\0C\0C\0C\0B\0B\0\0\0B\0B\0\0\x007\0B\0B\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0B\0\0\0\0\0B\0\0\0\0\0\0\0B\0\0\0\0\0;\0\0\0\0\0;\0\0\0\0\0\0\0;\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x008\0\0\0\0\x008\0\0\0\0\0\0\x008\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0>\0<\0=\0>\0<\0=\0\0\0>\0<\0=\0D\0\0\0\0\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0\0\0\0\0\0\0\0\0\0\0\0\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0E\0\0\0\0\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0\0\0\0\0\0\0\0\0\0\0\0\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0F\0\0\0\0\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0\0\0\0\0\0\0\0\0\0\0\0\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0Q\0P\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0Q\0\0\0\0\0O\0\0\0R\0\0\0\0\0M\0\0\0\0\0\0\0\0\0\0\0N\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0J\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0K\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0S\0\0\0\0\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0\0\0\0\0\0\0\0\0\0\0\0\0L\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0\0\0\0\0\0\0\0\0\0\0\0\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0T\0\0\0\0\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0\0\0\0\0\0\0\0\0\0\0I\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
  /* lex_check */"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\x0b\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\r\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x04\0\x0e\0\x0f\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x10\0\x13\0\x17\0\x1c\0\x0f\0\x0f\0\x0f\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0+\x008\0;\0K\0M\0Z\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff[\0\xff\xff\x1c\0\xff\xff\xff\xff\x05\0\xff\xff\xff\xff\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0V\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\xff\xff\xff\xffV\0\xff\xff\xff\xff\xff\xff\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x16\0\x1e\0\x1e\0$\0$\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\0\xff\xff$\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1e\0'\0$\0\xff\xff'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0[\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0\xff\xff\xff\xff(\0\xff\xff\x1e\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0\xff\xff\xff\xff\xff\xff\xff\xffV\0\xff\xff\xff\xff(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\0(\x004\0\xff\xff\xff\xff4\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff4\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff4\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x005\x005\0\xff\xff6\x006\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff5\0\xff\xff\xff\xff6\0\xff\xff5\0\xff\xff\xff\xff6\0\xff\xff5\0\xff\xff\xff\xff6\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff5\0\xff\xff\xff\xff6\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff5\0\xff\xff\xff\xff6\x005\0\xff\xff\xff\xff6\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff5\x005\x005\x006\x006\x006\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\x009\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0:\0?\0?\0\xff\xff@\0@\0\xff\xff5\0B\0B\x006\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff?\0\xff\xff\xff\xff@\0\xff\xff\xff\xff\xff\xffB\0\xff\xff\xff\xff?\0\xff\xff\xff\xff@\0\xff\xff\xff\xff\xff\xffB\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff?\0\xff\xff\xff\xff@\0\xff\xff\xff\xff\xff\xffB\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff?\0?\0?\0@\0@\0@\0\xff\xffB\0B\0B\0D\0\xff\xff\xff\xffD\0D\0D\0D\0D\0D\0D\0D\0D\0D\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffD\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffD\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0E\0\xff\xff\xff\xffE\0E\0E\0E\0E\0E\0E\0E\0E\0E\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffE\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffE\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0E\0F\0\xff\xff\xff\xffF\0F\0F\0F\0F\0F\0F\0F\0F\0F\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffF\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffF\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0G\0G\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffG\0\xff\xff\xff\xffG\0\xff\xffG\0\xff\xff\xff\xffG\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffG\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffG\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffG\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffS\0\xff\xff\xff\xffS\0S\0S\0S\0S\0S\0S\0S\0S\0S\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffG\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffS\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffT\0\xff\xff\xff\xffT\0T\0T\0T\0T\0T\0T\0T\0T\0T\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffT\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffG\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
  /* lex_base_code */"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\x04\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
  /* lex_backtrk_code */"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\0\0\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
  /* lex_default_code */"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
  /* lex_trans_code */"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\x01\0\0\0\x
  /* lex_check_code */"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff5\x005\0?\0?\0@\0@\0B\0B\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff5\0\xff\xff?\0\xff\xff@\0\xff\xffB\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
  /* lex_code */"\xff\x02\xff\x01\xff\xff\0\x02\xff\0\x01\xff"
];

function numexpr(lexbuf) {
  return __ocaml_lex_numexpr_rec(lexbuf, 0);
}

function __ocaml_lex_numexpr_rec(lexbuf, ___ocaml_lex_state) {
  while(true) {
    var __ocaml_lex_state = ___ocaml_lex_state;
    var __ocaml_lex_state$1 = Lexing.engine(__ocaml_lex_tables, __ocaml_lex_state, lexbuf);
    if (__ocaml_lex_state$1 > 45 || __ocaml_lex_state$1 < 0) {
      Curry._1(lexbuf[/* refill_buff */0], lexbuf);
      ___ocaml_lex_state = __ocaml_lex_state$1;
      continue ;
      
    }
    else {
      switch (__ocaml_lex_state$1) {
        case 0 : 
            after_comment_state[0] = /* STATE_NUMEXPR */0;
            next_state[0] = /* STATE_COMMENT */3;
            return /* IGNORED */1;
        case 1 : 
            ___ocaml_lex_state = 0;
            continue ;
            case 2 : 
            increment_line(lexbuf);
            ___ocaml_lex_state = 0;
            continue ;
            case 3 : 
            return /* UNITVALUE */Block.__(81, [get_pos(lexbuf)]);
        case 4 : 
            increment(numdepth);
            return /* LPAREN */Block.__(56, [get_pos(lexbuf)]);
        case 5 : 
            decrement(numdepth);
            if (Stacklist.is_empty(numdepth_stack)) {
              return /* RPAREN */Block.__(57, [get_pos(lexbuf)]);
            }
            else if (numdepth[0] === Stacklist.top(numdepth_stack)) {
              Stacklist.delete_top(numdepth_stack);
              next_state[0] = /* STATE_ACTIVE */2;
              return /* CLOSENUM */Block.__(65, [get_pos(lexbuf)]);
            }
            else {
              return /* RPAREN */Block.__(57, [get_pos(lexbuf)]);
            }
        case 6 : 
            increment(numdepth);
            return /* BRECORD */Block.__(75, [get_pos(lexbuf)]);
        case 7 : 
            decrement(numdepth);
            if (Stacklist.is_empty(numdepth_stack)) {
              return /* ERECORD */Block.__(76, [get_pos(lexbuf)]);
            }
            else if (numdepth[0] === Stacklist.top(numdepth_stack)) {
              Stacklist.delete_top(numdepth_stack);
              next_state[0] = /* STATE_ACTIVE */2;
              return /* CLOSENUM_AND_ERECORD */Block.__(78, [get_pos(lexbuf)]);
            }
            else {
              return /* ERECORD */Block.__(76, [get_pos(lexbuf)]);
            }
        case 8 : 
            return /* BLIST */Block.__(71, [get_pos(lexbuf)]);
        case 9 : 
            return /* ELIST */Block.__(73, [get_pos(lexbuf)]);
        case 10 : 
            return /* LISTPUNCT */Block.__(72, [get_pos(lexbuf)]);
        case 11 : 
            Stacklist.push(strdepth_stack, strdepth[0]);
            increment(strdepth);
            next_state[0] = /* STATE_STREXPR */1;
            ignore_space[0] = /* true */1;
            return /* OPENSTR */Block.__(62, [get_pos(lexbuf)]);
        case 12 : 
            openqtdepth[0] = Lexing.lexeme(lexbuf).length;
            after_literal_state[0] = /* STATE_NUMEXPR */0;
            next_state[0] = /* STATE_LITERAL */4;
            return /* OPENQT */Block.__(60, [get_pos(lexbuf)]);
        case 13 : 
            var tok = Lexing.lexeme(lexbuf);
            return /* CTRLSEQ */Block.__(6, [/* tuple */[
                        get_pos(lexbuf),
                        tok
                      ]]);
        case 14 : 
            return /* ACCESS */Block.__(79, [get_pos(lexbuf)]);
        case 15 : 
            return /* PLUS */Block.__(44, [get_pos(lexbuf)]);
        case 16 : 
            return /* MINUS */Block.__(45, [get_pos(lexbuf)]);
        case 17 : 
            return /* TIMES */Block.__(41, [get_pos(lexbuf)]);
        case 18 : 
            return /* DIVIDES */Block.__(42, [get_pos(lexbuf)]);
        case 19 : 
            return /* EQ */Block.__(46, [get_pos(lexbuf)]);
        case 20 : 
            return /* DEFEQ */Block.__(14, [get_pos(lexbuf)]);
        case 21 : 
            return /* NEQ */Block.__(47, [get_pos(lexbuf)]);
        case 22 : 
            return /* LEQ */Block.__(49, [get_pos(lexbuf)]);
        case 23 : 
            return /* LT */Block.__(51, [get_pos(lexbuf)]);
        case 24 : 
            return /* GEQ */Block.__(48, [get_pos(lexbuf)]);
        case 25 : 
            return /* GT */Block.__(50, [get_pos(lexbuf)]);
        case 26 : 
            return /* LAND */Block.__(53, [get_pos(lexbuf)]);
        case 27 : 
            return /* LOR */Block.__(54, [get_pos(lexbuf)]);
        case 28 : 
            return /* CONCAT */Block.__(55, [get_pos(lexbuf)]);
        case 29 : 
            return /* ARROW */Block.__(12, [get_pos(lexbuf)]);
        case 30 : 
            return /* OVERWRITEEQ */Block.__(34, [get_pos(lexbuf)]);
        case 31 : 
            return /* OVERWRITEGLOBALHASH */Block.__(85, [get_pos(lexbuf)]);
        case 32 : 
            return /* REFNOW */Block.__(36, [get_pos(lexbuf)]);
        case 33 : 
            return /* REFFINAL */Block.__(37, [get_pos(lexbuf)]);
        case 34 : 
            return /* CONS */Block.__(74, [get_pos(lexbuf)]);
        case 35 : 
            return /* COMMA */Block.__(70, [get_pos(lexbuf)]);
        case 36 : 
            return /* BAR */Block.__(28, [get_pos(lexbuf)]);
        case 37 : 
            return /* WILDCARD */Block.__(29, [get_pos(lexbuf)]);
        case 38 : 
            return /* DOT */Block.__(23, [get_pos(lexbuf)]);
        case 39 : 
            return /* COLON */Block.__(32, [get_pos(lexbuf)]);
        case 40 : 
            var xpltyvarnm = Lexing.sub_lexeme(lexbuf, lexbuf[/* lex_start_pos */4] + 1 | 0, lexbuf[/* lex_curr_pos */5]);
            return /* TYPEVAR */Block.__(2, [/* tuple */[
                        get_pos(lexbuf),
                        xpltyvarnm
                      ]]);
        case 41 : 
            var tok$1 = Lexing.lexeme(lexbuf);
            var pos = get_pos(lexbuf);
            switch (tok$1) {
              case "and" : 
                  return /* LETAND */Block.__(15, [pos]);
              case "as" : 
                  return /* AS */Block.__(31, [pos]);
              case "before" : 
                  return /* BEFORE */Block.__(80, [pos]);
              case "direct" : 
                  return /* DIRECT */Block.__(22, [pos]);
              case "do" : 
                  return /* DO */Block.__(83, [pos]);
              case "else" : 
                  return /* ELSE */Block.__(40, [pos]);
              case "end-struct" : 
                  return /* ENDSTRUCT */Block.__(19, [pos]);
              case "false" : 
                  return /* FALSE */Block.__(67, [pos]);
              case "function" : 
                  return /* LAMBDA */Block.__(11, [pos]);
              case "if" : 
                  return /* IF */Block.__(38, [pos]);
              case "in" : 
                  return /* IN */Block.__(16, [pos]);
              case "let" : 
                  return /* LET */Block.__(13, [pos]);
              case "let-lazy" : 
                  return /* LETLAZY */Block.__(35, [pos]);
              case "let-mutable" : 
                  return /* LETMUTABLE */Block.__(33, [pos]);
              case "match" : 
                  return /* MATCH */Block.__(26, [pos]);
              case "mod" : 
                  return /* MOD */Block.__(43, [pos]);
              case "module" : 
                  return /* MODULE */Block.__(17, [pos]);
              case "new-global-hash" : 
                  return /* NEWGLOBALHASH */Block.__(84, [pos]);
              case "not" : 
                  return /* LNOT */Block.__(52, [pos]);
              case "of" : 
                  return /* OF */Block.__(25, [pos]);
              case "priv" : 
                  return /* PRIVATE */Block.__(21, [pos]);
              case "publ" : 
                  return /* PUBLIC */Block.__(20, [pos]);
              case "renew-global-hash" : 
                  return /* RENEWGLOBALHASH */Block.__(86, [pos]);
              case "struct" : 
                  return /* STRUCT */Block.__(18, [pos]);
              case "then" : 
                  return /* THEN */Block.__(39, [pos]);
              case "true" : 
                  return /* TRUE */Block.__(66, [pos]);
              case "type" : 
                  return /* VARIANT */Block.__(24, [pos]);
              case "when" : 
                  return /* WHEN */Block.__(30, [pos]);
              case "while" : 
                  return /* WHILE */Block.__(82, [pos]);
              case "with" : 
                  return /* WITH */Block.__(27, [pos]);
              default:
                return /* VAR */Block.__(0, [/* tuple */[
                            pos,
                            tok$1
                          ]]);
            }
            break;
        case 42 : 
            return /* CONSTRUCTOR */Block.__(3, [/* tuple */[
                        get_pos(lexbuf),
                        Lexing.lexeme(lexbuf)
                      ]]);
        case 43 : 
            return /* NUMCONST */Block.__(4, [/* tuple */[
                        get_pos(lexbuf),
                        Lexing.lexeme(lexbuf)
                      ]]);
        case 44 : 
            if (first_state[0]) {
              throw [
                    LexError,
                    error_reporting(lexbuf, "text input ended while reading a program area")
                  ];
            }
            else {
              return /* EOI */0;
            }
            break;
        case 45 : 
            var c = Lexing.sub_lexeme_char(lexbuf, lexbuf[/* lex_start_pos */4]);
            throw [
                  LexError,
                  error_reporting(lexbuf, "illegal token '" + ($$String.make(1, c) + "' in a program area"))
                ];
        
      }
    }
  };
}

function strexpr(lexbuf) {
  lexbuf[/* lex_mem */9] = Caml_array.caml_make_vect(3, -1);
  lexbuf[/* lex_mem */9][2] = lexbuf[/* lex_curr_pos */5];
  lexbuf[/* lex_mem */9][1] = lexbuf[/* lex_curr_pos */5];
  return __ocaml_lex_strexpr_rec(lexbuf, 53);
}

function __ocaml_lex_strexpr_rec(lexbuf, ___ocaml_lex_state) {
  while(true) {
    var __ocaml_lex_state = ___ocaml_lex_state;
    var __ocaml_lex_state$1 = Lexing.new_engine(__ocaml_lex_tables, __ocaml_lex_state, lexbuf);
    if (__ocaml_lex_state$1 > 13 || __ocaml_lex_state$1 < 0) {
      Curry._1(lexbuf[/* refill_buff */0], lexbuf);
      ___ocaml_lex_state = __ocaml_lex_state$1;
      continue ;
      
    }
    else {
      switch (__ocaml_lex_state$1) {
        case 0 : 
            after_comment_state[0] = /* STATE_STREXPR */1;
            ignore_space[0] = /* true */1;
            next_state[0] = /* STATE_COMMENT */3;
            return /* IGNORED */1;
        case 1 : 
            increment_line_for_each_break(lexbuf, Lexing.lexeme(lexbuf), 0);
            increment(strdepth);
            ignore_space[0] = /* true */1;
            return /* BGRP */Block.__(58, [get_pos(lexbuf)]);
        case 2 : 
            decrement(strdepth);
            increment_line_for_each_break(lexbuf, Lexing.lexeme(lexbuf), 0);
            if (Stacklist.is_empty(strdepth_stack)) {
              ignore_space[0] = /* false */0;
              return /* EGRP */Block.__(59, [get_pos(lexbuf)]);
            }
            else if (strdepth[0] === Stacklist.top(strdepth_stack)) {
              Stacklist.delete_top(strdepth_stack);
              next_state[0] = /* STATE_NUMEXPR */0;
              return /* CLOSESTR */Block.__(63, [get_pos(lexbuf)]);
            }
            else {
              ignore_space[0] = /* false */0;
              return /* EGRP */Block.__(59, [get_pos(lexbuf)]);
            }
        case 3 : 
            increment_line_for_each_break(lexbuf, Lexing.lexeme(lexbuf), 0);
            ignore_space[0] = /* true */1;
            return /* SEP */Block.__(68, [get_pos(lexbuf)]);
        case 4 : 
            increment_line(lexbuf);
            if (ignore_space[0]) {
              return strexpr(lexbuf);
            }
            else {
              ignore_space[0] = /* true */1;
              return /* BREAK */Block.__(10, [get_pos(lexbuf)]);
            }
        case 5 : 
            if (ignore_space[0]) {
              return strexpr(lexbuf);
            }
            else {
              ignore_space[0] = /* true */1;
              return /* SPACE */Block.__(9, [get_pos(lexbuf)]);
            }
        case 6 : 
            var itemstr = Lexing.sub_lexeme(lexbuf, lexbuf[/* lex_mem */9][0], lexbuf[/* lex_curr_pos */5]);
            increment_line_for_each_break(lexbuf, Lexing.lexeme(lexbuf), 0);
            ignore_space[0] = /* true */1;
            return /* ITEM */Block.__(87, [/* tuple */[
                        get_pos(lexbuf),
                        itemstr.length
                      ]]);
        case 7 : 
            var tok = Lexing.lexeme(lexbuf);
            next_state[0] = /* STATE_ACTIVE */2;
            return /* CTRLSEQ */Block.__(6, [/* tuple */[
                        get_pos(lexbuf),
                        tok
                      ]]);
        case 8 : 
            var tok$1 = $$String.sub(Lexing.lexeme(lexbuf), 1, 1);
            ignore_space[0] = /* false */0;
            return /* CHAR */Block.__(5, [/* tuple */[
                        get_pos(lexbuf),
                        tok$1
                      ]]);
        case 9 : 
            var tok$2 = Lexing.lexeme(lexbuf);
            var vnm = $$String.sub(tok$2, 1, tok$2.length - 1 | 0);
            next_state[0] = /* STATE_ACTIVE */2;
            return /* VARINSTR */Block.__(1, [/* tuple */[
                        get_pos(lexbuf),
                        vnm
                      ]]);
        case 10 : 
            var openqtstr = Lexing.sub_lexeme(lexbuf, lexbuf[/* lex_mem */9][0], lexbuf[/* lex_curr_pos */5]);
            increment_line_for_each_break(lexbuf, Lexing.lexeme(lexbuf), 0);
            openqtdepth[0] = openqtstr.length;
            after_literal_state[0] = /* STATE_STREXPR */1;
            next_state[0] = /* STATE_LITERAL */4;
            return /* OPENQT */Block.__(60, [get_pos(lexbuf)]);
        case 11 : 
            if (first_state[0] === /* STATE_STREXPR */1) {
              return /* EOI */0;
            }
            else {
              throw [
                    LexError,
                    error_reporting(lexbuf, "program input ended while reading a text area")
                  ];
            }
            break;
        case 12 : 
            ignore_space[0] = /* false */0;
            var tok$3 = Lexing.lexeme(lexbuf);
            return /* CHAR */Block.__(5, [/* tuple */[
                        get_pos(lexbuf),
                        tok$3
                      ]]);
        case 13 : 
            var c = Lexing.sub_lexeme_char(lexbuf, lexbuf[/* lex_start_pos */4]);
            throw [
                  LexError,
                  error_reporting(lexbuf, "illegal token '") + ($$String.make(1, c) + "' in a text area")
                ];
        
      }
    }
  };
}

function active(lexbuf) {
  return __ocaml_lex_active_rec(lexbuf, 71);
}

function __ocaml_lex_active_rec(lexbuf, ___ocaml_lex_state) {
  while(true) {
    var __ocaml_lex_state = ___ocaml_lex_state;
    var __ocaml_lex_state$1 = Lexing.engine(__ocaml_lex_tables, __ocaml_lex_state, lexbuf);
    if (__ocaml_lex_state$1 > 11 || __ocaml_lex_state$1 < 0) {
      Curry._1(lexbuf[/* refill_buff */0], lexbuf);
      ___ocaml_lex_state = __ocaml_lex_state$1;
      continue ;
      
    }
    else {
      switch (__ocaml_lex_state$1) {
        case 0 : 
            after_comment_state[0] = /* STATE_ACTIVE */2;
            next_state[0] = /* STATE_COMMENT */3;
            return /* IGNORED */1;
        case 1 : 
            ___ocaml_lex_state = 71;
            continue ;
            case 2 : 
            increment_line(lexbuf);
            ___ocaml_lex_state = 71;
            continue ;
            case 3 : 
            var tok = Lexing.lexeme(lexbuf);
            return /* IDNAME */Block.__(7, [/* tuple */[
                        get_pos(lexbuf),
                        tok
                      ]]);
        case 4 : 
            var tok$1 = Lexing.lexeme(lexbuf);
            return /* CLASSNAME */Block.__(8, [/* tuple */[
                        get_pos(lexbuf),
                        tok$1
                      ]]);
        case 5 : 
            Stacklist.push(numdepth_stack, numdepth[0]);
            increment(numdepth);
            next_state[0] = /* STATE_NUMEXPR */0;
            return /* OPENNUM */Block.__(64, [get_pos(lexbuf)]);
        case 6 : 
            Stacklist.push(numdepth_stack, numdepth[0]);
            increment(numdepth);
            next_state[0] = /* STATE_NUMEXPR */0;
            return /* OPENNUM_AND_BRECORD */Block.__(77, [get_pos(lexbuf)]);
        case 7 : 
            increment(strdepth);
            next_state[0] = /* STATE_STREXPR */1;
            ignore_space[0] = /* true */1;
            return /* BGRP */Block.__(58, [get_pos(lexbuf)]);
        case 8 : 
            openqtdepth[0] = Lexing.lexeme(lexbuf).length;
            ignore_space[0] = /* false */0;
            after_literal_state[0] = /* STATE_STREXPR */1;
            next_state[0] = /* STATE_LITERAL */4;
            return /* OPENQT */Block.__(60, [get_pos(lexbuf)]);
        case 9 : 
            next_state[0] = /* STATE_STREXPR */1;
            ignore_space[0] = /* false */0;
            return /* END */Block.__(69, [get_pos(lexbuf)]);
        case 10 : 
            throw [
                  LexError,
                  error_reporting(lexbuf, "input ended while reading active area")
                ];
        case 11 : 
            var tok$2 = Lexing.lexeme(lexbuf);
            throw [
                  LexError,
                  error_reporting(lexbuf, "unexpected token '" + (tok$2 + "' in active area"))
                ];
        
      }
    }
  };
}

function literal(lexbuf) {
  return __ocaml_lex_literal_rec(lexbuf, 86);
}

function __ocaml_lex_literal_rec(lexbuf, ___ocaml_lex_state) {
  while(true) {
    var __ocaml_lex_state = ___ocaml_lex_state;
    var __ocaml_lex_state$1 = Lexing.engine(__ocaml_lex_tables, __ocaml_lex_state, lexbuf);
    if (__ocaml_lex_state$1 > 3 || __ocaml_lex_state$1 < 0) {
      Curry._1(lexbuf[/* refill_buff */0], lexbuf);
      ___ocaml_lex_state = __ocaml_lex_state$1;
      continue ;
      
    }
    else {
      switch (__ocaml_lex_state$1) {
        case 0 : 
            var tok = Lexing.lexeme(lexbuf);
            var len = tok.length;
            if (len < openqtdepth[0]) {
              return /* CHAR */Block.__(5, [/* tuple */[
                          get_pos(lexbuf),
                          tok
                        ]]);
            }
            else if (len > openqtdepth[0]) {
              throw [
                    LexError,
                    error_reporting(lexbuf, "literal area was closed with too many '`'s")
                  ];
            }
            else {
              next_state[0] = after_literal_state[0];
              return /* CLOSEQT */Block.__(61, [get_pos(lexbuf)]);
            }
            break;
        case 1 : 
            increment_line(lexbuf);
            return /* CHAR */Block.__(5, [/* tuple */[
                        get_pos(lexbuf),
                        "\n"
                      ]]);
        case 2 : 
            throw [
                  LexError,
                  error_reporting(lexbuf, "input ended while reading literal area")
                ];
        case 3 : 
            var tok$1 = Lexing.lexeme(lexbuf);
            return /* CHAR */Block.__(5, [/* tuple */[
                        get_pos(lexbuf),
                        tok$1
                      ]]);
        
      }
    }
  };
}

function comment(lexbuf) {
  return __ocaml_lex_comment_rec(lexbuf, 91);
}

function __ocaml_lex_comment_rec(lexbuf, ___ocaml_lex_state) {
  while(true) {
    var __ocaml_lex_state = ___ocaml_lex_state;
    var __ocaml_lex_state$1 = Lexing.engine(__ocaml_lex_tables, __ocaml_lex_state, lexbuf);
    if (__ocaml_lex_state$1 > 2 || __ocaml_lex_state$1 < 0) {
      Curry._1(lexbuf[/* refill_buff */0], lexbuf);
      ___ocaml_lex_state = __ocaml_lex_state$1;
      continue ;
      
    }
    else {
      switch (__ocaml_lex_state$1) {
        case 0 : 
            increment_line(lexbuf);
            next_state[0] = after_comment_state[0];
            return /* IGNORED */1;
        case 1 : 
            return /* EOI */0;
        case 2 : 
            ___ocaml_lex_state = 91;
            continue ;
            
      }
    }
  };
}

function cut_token(lexbuf) {
  while(true) {
    var match = next_state[0];
    var output;
    switch (match) {
      case 0 : 
          output = __ocaml_lex_numexpr_rec(lexbuf, 0);
          break;
      case 1 : 
          output = strexpr(lexbuf);
          break;
      case 2 : 
          output = __ocaml_lex_active_rec(lexbuf, 71);
          break;
      case 3 : 
          output = __ocaml_lex_comment_rec(lexbuf, 91);
          break;
      case 4 : 
          output = __ocaml_lex_literal_rec(lexbuf, 86);
          break;
      
    }
    if (typeof output === "number") {
      if (output !== 0) {
        continue ;
        
      }
      else {
        return output;
      }
    }
    else {
      return output;
    }
  };
}

exports.LexError                      = LexError;
exports.line_no                       = line_no;
exports.end_of_previousline           = end_of_previousline;
exports.next_state                    = next_state;
exports.first_state                   = first_state;
exports.after_literal_state           = after_literal_state;
exports.after_comment_state           = after_comment_state;
exports.ignore_space                  = ignore_space;
exports.openqtdepth                   = openqtdepth;
exports.numdepth                      = numdepth;
exports.strdepth                      = strdepth;
exports.numdepth_stack                = numdepth_stack;
exports.strdepth_stack                = strdepth_stack;
exports.increment                     = increment;
exports.decrement                     = decrement;
exports.get_start_pos                 = get_start_pos;
exports.get_end_pos                   = get_end_pos;
exports.get_pos                       = get_pos;
exports.error_reporting               = error_reporting;
exports.increment_line                = increment_line;
exports.increment_line_for_each_break = increment_line_for_each_break;
exports.reset_to_numexpr              = reset_to_numexpr;
exports.reset_to_strexpr              = reset_to_strexpr;
exports.__ocaml_lex_tables            = __ocaml_lex_tables;
exports.numexpr                       = numexpr;
exports.__ocaml_lex_numexpr_rec       = __ocaml_lex_numexpr_rec;
exports.strexpr                       = strexpr;
exports.__ocaml_lex_strexpr_rec       = __ocaml_lex_strexpr_rec;
exports.active                        = active;
exports.__ocaml_lex_active_rec        = __ocaml_lex_active_rec;
exports.literal                       = literal;
exports.__ocaml_lex_literal_rec       = __ocaml_lex_literal_rec;
exports.comment                       = comment;
exports.__ocaml_lex_comment_rec       = __ocaml_lex_comment_rec;
exports.cut_token                     = cut_token;
/* No side effect */
