// Generated by BUCKLESCRIPT VERSION 1.0.1 , PLEASE EDIT WITH CARE
'use strict';

var Pervasives = require("bs-platform/lib/js/pervasives");
var Block      = require("bs-platform/lib/js/block");

function dummy(msg) {
  return /* Dummy */Block.__(0, [msg]);
}

function is_dummy(rng) {
  if (rng.tag) {
    return /* false */0;
  }
  else {
    return /* true */1;
  }
}

function message(rng) {
  if (rng.tag) {
    return "*NORMAL*";
  }
  else {
    return rng[0];
  }
}

function to_string(rng) {
  if (rng.tag) {
    var pos2 = rng[3];
    var ln2 = rng[2];
    var pos1 = rng[1];
    var ln1 = rng[0];
    if (ln1 === ln2) {
      return "line " + (Pervasives.string_of_int(ln1) + (", characters " + (Pervasives.string_of_int(pos1) + ("-" + Pervasives.string_of_int(pos2)))));
    }
    else {
      return "line " + (Pervasives.string_of_int(ln1) + (", character " + (Pervasives.string_of_int(pos1) + (" to line " + (Pervasives.string_of_int(ln2) + (", character " + Pervasives.string_of_int(pos2)))))));
    }
  }
  else {
    return "dummy range '" + (rng[0] + "'");
  }
}

function unite(rng1, rng2) {
  if (rng1.tag) {
    if (rng2.tag) {
      return /* Normal */Block.__(1, [
                rng1[0],
                rng1[1],
                rng2[2],
                rng2[3]
              ]);
    }
    else {
      return rng1;
    }
  }
  else if (rng2.tag) {
    return rng2;
  }
  else {
    return /* Dummy */Block.__(0, ["unite"]);
  }
}

function make(ln, pos1, pos2) {
  return /* Normal */Block.__(1, [
            ln,
            pos1,
            ln,
            pos2
          ]);
}

exports.dummy     = dummy;
exports.is_dummy  = is_dummy;
exports.message   = message;
exports.to_string = to_string;
exports.unite     = unite;
exports.make      = make;
/* No side effect */
