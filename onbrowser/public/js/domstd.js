// Generated by BUCKLESCRIPT VERSION 1.0.1 , PLEASE EDIT WITH CARE
'use strict';

var Curry          = require("bs-platform/lib/js/curry");
var CamlinternalOO = require("bs-platform/lib/js/camlinternalOO");
var $$Array        = require("bs-platform/lib/js/array");
var List           = require("bs-platform/lib/js/list");

var afterLoadingHTML = (
    function(f) { window.onload = f; }
  );

function appendChildMap(lst, prnt) {
  return List.iter(function (x) {
              prnt.appendChild(x);
              return /* () */0;
            }, lst);
}

function getElementsByTagName(tagnm, doc) {
  return $$Array.to_list(doc.getElementsByTagName(tagnm));
}

function getElementsByName(nm, doc) {
  return $$Array.to_list(doc.getElementsByName(nm));
}

var class_tables = [
  0,
  0,
  0
];

function ocaml_object_of_mouse_event_js(ejs) {
  if (!class_tables[0]) {
    var $$class = CamlinternalOO.create_table([
          "altKey",
          "view",
          "button",
          "ctrlKey",
          "detail",
          "clientX",
          "clientY",
          "shiftKey",
          "metaKey",
          "screenX",
          "screenY"
        ]);
    var env = CamlinternalOO.new_variable($$class, "");
    var ids = CamlinternalOO.get_method_labels($$class, [
          "view",
          "shiftKey",
          "screenY",
          "screenX",
          "metaKey",
          "detail",
          "ctrlKey",
          "clientY",
          "clientX",
          "button",
          "altKey"
        ]);
    var view = ids[0];
    var shiftKey = ids[1];
    var screenY = ids[2];
    var screenX = ids[3];
    var metaKey = ids[4];
    var detail = ids[5];
    var ctrlKey = ids[6];
    var clientY = ids[7];
    var clientX = ids[8];
    var button = ids[9];
    var altKey = ids[10];
    CamlinternalOO.set_methods($$class, /* array */[
          view,
          function (self$neg4) {
            return self$neg4[env][0].view;
          },
          detail,
          function (self$neg4) {
            return self$neg4[env][0].detail;
          },
          button,
          function (self$neg4) {
            return self$neg4[env][0].button;
          },
          altKey,
          function (self$neg4) {
            return +self$neg4[env][0].altKey;
          },
          ctrlKey,
          function (self$neg4) {
            return +self$neg4[env][0].ctrlKey;
          },
          metaKey,
          function (self$neg4) {
            return +self$neg4[env][0].metaKey;
          },
          shiftKey,
          function (self$neg4) {
            return +self$neg4[env][0].shiftKey;
          },
          clientX,
          function (self$neg4) {
            return self$neg4[env][0].clientX;
          },
          clientY,
          function (self$neg4) {
            return self$neg4[env][0].clientY;
          },
          screenX,
          function (self$neg4) {
            return self$neg4[env][0].screenX;
          },
          screenY,
          function (self$neg4) {
            return self$neg4[env][0].screenY;
          }
        ]);
    var env_init = function (env$1) {
      var self = CamlinternalOO.create_object_opt(0, $$class);
      self[env] = env$1;
      return self;
    };
    CamlinternalOO.init_class($$class);
    class_tables[0] = env_init;
  }
  return Curry._1(class_tables[0], [ejs]);
}

var class_tables$1 = [
  0,
  0,
  0
];

function ocaml_object_of_keyboard_event_js(ejs) {
  if (!class_tables$1[0]) {
    var $$class = CamlinternalOO.create_table([
          "altKey",
          "ctrlKey",
          "shiftKey",
          "keyCode"
        ]);
    var env = CamlinternalOO.new_variable($$class, "");
    var ids = CamlinternalOO.get_method_labels($$class, [
          "shiftKey",
          "keyCode",
          "ctrlKey",
          "altKey"
        ]);
    var shiftKey = ids[0];
    var keyCode = ids[1];
    var ctrlKey = ids[2];
    var altKey = ids[3];
    CamlinternalOO.set_methods($$class, /* array */[
          altKey,
          function (self$neg5) {
            return +self$neg5[env][0].altKey;
          },
          ctrlKey,
          function (self$neg5) {
            return +self$neg5[env][0].ctrlKey;
          },
          shiftKey,
          function (self$neg5) {
            return +self$neg5[env][0].shiftKey;
          },
          keyCode,
          function (self$neg5) {
            return self$neg5[env][0].keyCode;
          }
        ]);
    var env_init = function (env$1) {
      var self = CamlinternalOO.create_object_opt(0, $$class);
      self[env] = env$1;
      return self;
    };
    CamlinternalOO.init_class($$class);
    class_tables$1[0] = env_init;
  }
  return Curry._1(class_tables$1[0], [ejs]);
}

function addEventListener(k, f, elem) {
  switch (k) {
    case 0 : 
        return elem.addEventListener("click", function (param) {
                    return Curry._1(f, ocaml_object_of_mouse_event_js(param));
                  });
    case 1 : 
        return elem.addEventListener("dblclick", function (param) {
                    return Curry._1(f, ocaml_object_of_mouse_event_js(param));
                  });
    case 2 : 
        return elem.addEventListener("contextmenu", function (param) {
                    return Curry._1(f, ocaml_object_of_mouse_event_js(param));
                  });
    case 3 : 
        return elem.addEventListener("mouseenter", function (param) {
                    return Curry._1(f, ocaml_object_of_mouse_event_js(param));
                  });
    case 4 : 
        return elem.addEventListener("mouseleave", function (param) {
                    return Curry._1(f, ocaml_object_of_mouse_event_js(param));
                  });
    case 5 : 
        return elem.addEventListener("mousedown", function (param) {
                    return Curry._1(f, ocaml_object_of_mouse_event_js(param));
                  });
    case 6 : 
        return elem.addEventListener("mouseup", function (param) {
                    return Curry._1(f, ocaml_object_of_mouse_event_js(param));
                  });
    case 7 : 
        return elem.addEventListener("mousemove", function (param) {
                    return Curry._1(f, ocaml_object_of_mouse_event_js(param));
                  });
    case 8 : 
        return elem.addEventListener("mouseover", function (param) {
                    return Curry._1(f, ocaml_object_of_mouse_event_js(param));
                  });
    case 9 : 
        return elem.addEventListener("mouseout", function (param) {
                    return Curry._1(f, ocaml_object_of_mouse_event_js(param));
                  });
    case 10 : 
        return elem.addEventListener("keydown", function (param) {
                    return Curry._1(f, ocaml_object_of_keyboard_event_js(param));
                  });
    case 11 : 
        return elem.addEventListener("keypress", function (param) {
                    return Curry._1(f, ocaml_object_of_keyboard_event_js(param));
                  });
    case 12 : 
        return elem.addEventListener("keyup", function (param) {
                    return Curry._1(f, ocaml_object_of_keyboard_event_js(param));
                  });
    
  }
}


  var setInnerText_aux = function(txt, nd) {
    nd.innerHTML = txt;
    console.log("A: " + txt);
    return nd;
  }

;

function createSvgElement(tagnm, doc) {
  return doc.createElementNS("http://www.w3.org/2000/svg", tagnm);
}

function setAttributeMap(lst, elem) {
  return List.iter(function (param) {
              return elem.setAttribute(param[0], param[1]);
            }, lst);
}

function setInterval$1(prim, prim$1) {
  setInterval(prim, prim$1);
  return /* () */0;
}

function setAttribute(prim, prim$1, prim$2) {
  return prim$2.setAttribute(prim, prim$1);
}

function appendChild(prim, prim$1) {
  return prim$1.appendChild(prim);
}

var $$document = document;

function getElementById(prim, prim$1) {
  return prim$1.getElementById(prim);
}

function createElement(prim, prim$1) {
  return prim$1.createElement(prim);
}

function createTextNode(prim, prim$1) {
  return prim$1.createTextNode(prim);
}

function createComment(prim, prim$1) {
  return prim$1.createComment(prim);
}

function setInnerText(prim, prim$1) {
  return setInnerText_aux(prim, prim$1);
}

exports.afterLoadingHTML     = afterLoadingHTML;
exports.setInterval          = setInterval$1;
exports.setAttribute         = setAttribute;
exports.appendChild          = appendChild;
exports.appendChildMap       = appendChildMap;
exports.$$document           = $$document;
exports.getElementById       = getElementById;
exports.getElementsByTagName = getElementsByTagName;
exports.getElementsByName    = getElementsByName;
exports.createElement        = createElement;
exports.createTextNode       = createTextNode;
exports.createComment        = createComment;
exports.addEventListener     = addEventListener;
exports.setInnerText         = setInnerText;
exports.createSvgElement     = createSvgElement;
exports.setAttributeMap      = setAttributeMap;
/* afterLoadingHTML Not a pure module */
