// Generated by BUCKLESCRIPT VERSION 1.0.1 , PLEASE EDIT WITH CARE
'use strict';

var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions");
var Tyvarid                 = require("./tyvarid");
var Assoc                   = require("./assoc");
var Curry                   = require("bs-platform/lib/js/curry");
var List                    = require("bs-platform/lib/js/list");
var Types                   = require("./types");

function to_kind_struct_list(kdenv) {
  return List.map(function (param) {
              return param[1];
            }, kdenv);
}

function add(kdenv, tvid, kdstr) {
  if (kdenv) {
    var tail = kdenv[1];
    var match = kdenv[0];
    var alpha = match[0];
    if (Tyvarid.same(alpha, tvid)) {
      return /* :: */[
              /* tuple */[
                tvid,
                kdstr
              ],
              tail
            ];
    }
    else {
      return /* :: */[
              /* tuple */[
                alpha,
                match[1]
              ],
              add(tail, tvid, kdstr)
            ];
    }
  }
  else {
    return /* :: */[
            /* tuple */[
              tvid,
              kdstr
            ],
            /* [] */0
          ];
  }
}

function find(_kdenv, tvid) {
  while(true) {
    var kdenv = _kdenv;
    if (kdenv) {
      var match = kdenv[0];
      if (Tyvarid.same(match[0], tvid)) {
        return match[1];
      }
      else {
        _kdenv = kdenv[1];
        continue ;
        
      }
    }
    else {
      throw Caml_builtin_exceptions.not_found;
    }
  };
}

function replace_type_variable_in_kind_struct(kdstr, tvid, tystr) {
  if (kdstr) {
    return /* RecordKind */[Assoc.map_value(function (ty) {
                  return Types.replace_type_variable(ty, tvid, tystr);
                }, kdstr[0])];
  }
  else {
    return /* UniversalKind */0;
  }
}

function replace_type_variable_in_kindenv(kdenv, tvid, tystr) {
  if (kdenv) {
    var match = kdenv[0];
    return /* :: */[
            /* tuple */[
              match[0],
              replace_type_variable_in_kind_struct(match[1], tvid, tystr)
            ],
            replace_type_variable_in_kindenv(kdenv[1], tvid, tystr)
          ];
  }
  else {
    return /* [] */0;
  }
}

function to_string(fk, kdenv) {
  return List.fold_left(function (str, param) {
              return str + (Tyvarid.show_direct(param[0]) + (" :: " + (Curry._1(fk, param[1]) + ", ")));
            }, "", kdenv);
}

var empty = /* [] */0;

exports.empty                                = empty;
exports.to_kind_struct_list                  = to_kind_struct_list;
exports.add                                  = add;
exports.find                                 = find;
exports.replace_type_variable_in_kindenv     = replace_type_variable_in_kindenv;
exports.replace_type_variable_in_kind_struct = replace_type_variable_in_kind_struct;
exports.to_string                            = to_string;
/* Types Not a pure module */
