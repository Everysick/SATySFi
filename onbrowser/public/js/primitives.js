// Generated by BUCKLESCRIPT VERSION 1.0.1 , PLEASE EDIT WITH CARE
'use strict';

var Range      = require("./range");
var Variantenv = require("./variantenv");
var Hashtbl    = require("bs-platform/lib/js/hashtbl");
var Block      = require("bs-platform/lib/js/block");
var Typeenv    = require("./typeenv");
var Tyvarid    = require("./tyvarid");

var dr = Range.dummy("make_variant_environment");

var tv1 = Tyvarid.fresh(/* Quantifiable */0);

var varntenv = Variantenv.add_list(Variantenv.empty, /* :: */[
      /* tuple */[
        "Item",
        /* tuple */[
          dr,
          /* ProductType */Block.__(3, [/* :: */[
                /* tuple */[
                  dr,
                  /* StringType */2
                ],
                /* :: */[
                  /* tuple */[
                    dr,
                    /* ListType */Block.__(1, [/* tuple */[
                          dr,
                          /* VariantType */Block.__(6, [
                              /* [] */0,
                              "itemize"
                            ])
                        ]])
                  ],
                  /* [] */0
                ]
              ]])
        ],
        "itemize"
      ],
      /* :: */[
        /* tuple */[
          "Just",
          /* tuple */[
            dr,
            /* ForallType */Block.__(7, [
                tv1,
                /* UniversalKind */0,
                /* tuple */[
                  dr,
                  /* TypeVariable */Block.__(4, [tv1])
                ]
              ])
          ],
          "maybe"
        ],
        /* :: */[
          /* tuple */[
            "Nothing",
            /* tuple */[
              dr,
              /* ForallType */Block.__(7, [
                  tv1,
                  /* UniversalKind */0,
                  /* tuple */[
                    dr,
                    /* UnitType */0
                  ]
                ])
            ],
            "maybe"
          ],
          /* [] */0
        ]
      ]
    ]);

var make_variant_environment = Variantenv.register_variant_list(varntenv, /* :: */[
      /* tuple */[
        0,
        "itemize"
      ],
      /* :: */[
        /* tuple */[
          1,
          "maybe"
        ],
        /* [] */0
      ]
    ]);

var i_000 = Range.dummy("int");

var i = /* tuple */[
  i_000,
  /* IntType */1
];

var b_000 = Range.dummy("bool");

var b = /* tuple */[
  b_000,
  /* BoolType */3
];

var s_000 = Range.dummy("string");

var s = /* tuple */[
  s_000,
  /* StringType */2
];

function v(n) {
  return /* tuple */[
          Range.dummy("tv"),
          /* TypeVariable */Block.__(4, [n])
        ];
}

function $neg$percent(n, cont) {
  return /* tuple */[
          Range.dummy("forall"),
          /* ForallType */Block.__(7, [
              n,
              /* UniversalKind */0,
              cont
            ])
        ];
}

function l(cont) {
  return /* tuple */[
          Range.dummy("list"),
          /* ListType */Block.__(1, [cont])
        ];
}

function r(cont) {
  return /* tuple */[
          Range.dummy("ref"),
          /* RefType */Block.__(2, [cont])
        ];
}

function $neg$neg$great(dom, cod) {
  return /* tuple */[
          Range.dummy("func"),
          /* FuncType */Block.__(0, [
              dom,
              cod
            ])
        ];
}

var tv1$1 = Tyvarid.fresh(/* Quantifiable */0);

var tv2 = Tyvarid.fresh(/* Quantifiable */0);

var make_type_environment = Typeenv.from_list(/* :: */[
      /* tuple */[
        "+",
        $neg$neg$great(i, $neg$neg$great(i, i))
      ],
      /* :: */[
        /* tuple */[
          "-",
          $neg$neg$great(i, $neg$neg$great(i, i))
        ],
        /* :: */[
          /* tuple */[
            "mod",
            $neg$neg$great(i, $neg$neg$great(i, i))
          ],
          /* :: */[
            /* tuple */[
              "*",
              $neg$neg$great(i, $neg$neg$great(i, i))
            ],
            /* :: */[
              /* tuple */[
                "/",
                $neg$neg$great(i, $neg$neg$great(i, i))
              ],
              /* :: */[
                /* tuple */[
                  "^",
                  $neg$neg$great(s, $neg$neg$great(s, s))
                ],
                /* :: */[
                  /* tuple */[
                    "==",
                    $neg$neg$great(i, $neg$neg$great(i, b))
                  ],
                  /* :: */[
                    /* tuple */[
                      "<>",
                      $neg$neg$great(i, $neg$neg$great(i, b))
                    ],
                    /* :: */[
                      /* tuple */[
                        ">",
                        $neg$neg$great(i, $neg$neg$great(i, b))
                      ],
                      /* :: */[
                        /* tuple */[
                          "<",
                          $neg$neg$great(i, $neg$neg$great(i, b))
                        ],
                        /* :: */[
                          /* tuple */[
                            ">=",
                            $neg$neg$great(i, $neg$neg$great(i, b))
                          ],
                          /* :: */[
                            /* tuple */[
                              "<=",
                              $neg$neg$great(i, $neg$neg$great(i, b))
                            ],
                            /* :: */[
                              /* tuple */[
                                "&&",
                                $neg$neg$great(b, $neg$neg$great(b, b))
                              ],
                              /* :: */[
                                /* tuple */[
                                  "||",
                                  $neg$neg$great(b, $neg$neg$great(b, b))
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "not",
                                    $neg$neg$great(b, b)
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "!",
                                      $neg$percent(tv1$1, $neg$neg$great(r(v(tv1$1)), v(tv1$1)))
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        "::",
                                        $neg$percent(tv2, $neg$neg$great(v(tv2), $neg$neg$great(l(v(tv2)), l(v(tv2)))))
                                      ],
                                      /* :: */[
                                        /* tuple */[
                                          "same",
                                          $neg$neg$great(s, $neg$neg$great(s, b))
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            "string-sub",
                                            $neg$neg$great(s, $neg$neg$great(i, $neg$neg$great(i, s)))
                                          ],
                                          /* :: */[
                                            /* tuple */[
                                              "string-length",
                                              $neg$neg$great(s, i)
                                            ],
                                            /* :: */[
                                              /* tuple */[
                                                "\\deeper",
                                                $neg$neg$great(s, s)
                                              ],
                                              /* :: */[
                                                /* tuple */[
                                                  "deeper",
                                                  $neg$neg$great(s, s)
                                                ],
                                                /* :: */[
                                                  /* tuple */[
                                                    "break",
                                                    s
                                                  ],
                                                  /* :: */[
                                                    /* tuple */[
                                                      "soft-break",
                                                      s
                                                    ],
                                                    /* :: */[
                                                      /* tuple */[
                                                        "space",
                                                        s
                                                      ],
                                                      /* :: */[
                                                        /* tuple */[
                                                          "arabic",
                                                          $neg$neg$great(i, s)
                                                        ],
                                                        /* [] */0
                                                      ]
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]);

function lambdas(env, vlst, ast) {
  if (vlst) {
    return /* FuncWithEnvironment */Block.__(5, [
              vlst[0],
              lambdas_sub(vlst[1], ast),
              env
            ]);
  }
  else {
    return ast;
  }
}

function lambdas_sub(vlst, ast) {
  if (vlst) {
    return /* LambdaAbstract */Block.__(14, [
              vlst[0],
              lambdas_sub(vlst[1], ast)
            ]);
  }
  else {
    return ast;
  }
}

function make_environment() {
  var loc_plus = [/* StringEmpty */0];
  var loc_minus = [/* StringEmpty */0];
  var loc_mod = [/* StringEmpty */0];
  var loc_times = [/* StringEmpty */0];
  var loc_divides = [/* StringEmpty */0];
  var loc_concat = [/* StringEmpty */0];
  var loc_equalto = [/* StringEmpty */0];
  var loc_neq = [/* StringEmpty */0];
  var loc_greaterthan = [/* StringEmpty */0];
  var loc_lessthan = [/* StringEmpty */0];
  var loc_geq = [/* StringEmpty */0];
  var loc_leq = [/* StringEmpty */0];
  var loc_land = [/* StringEmpty */0];
  var loc_lor = [/* StringEmpty */0];
  var loc_lnot = [/* StringEmpty */0];
  var loc_refnow = [/* StringEmpty */0];
  var loc_cons = [/* StringEmpty */0];
  var loc_same = [/* StringEmpty */0];
  var loc_stringsub = [/* StringEmpty */0];
  var loc_stringlength = [/* StringEmpty */0];
  var loc_deeper = [/* StringEmpty */0];
  var loc_break = [/* StringEmpty */0];
  var loc_softbreak = [/* StringEmpty */0];
  var loc_space = [/* StringEmpty */0];
  var loc_arabic = [/* StringEmpty */0];
  var env = Hashtbl.create(/* None */0, 128);
  Hashtbl.add(env, "+", loc_plus);
  Hashtbl.add(env, "-", loc_minus);
  Hashtbl.add(env, "mod", loc_mod);
  Hashtbl.add(env, "*", loc_times);
  Hashtbl.add(env, "/", loc_divides);
  Hashtbl.add(env, "^", loc_concat);
  Hashtbl.add(env, "==", loc_equalto);
  Hashtbl.add(env, "<>", loc_neq);
  Hashtbl.add(env, ">", loc_greaterthan);
  Hashtbl.add(env, "<", loc_lessthan);
  Hashtbl.add(env, ">=", loc_geq);
  Hashtbl.add(env, "<=", loc_leq);
  Hashtbl.add(env, "&&", loc_land);
  Hashtbl.add(env, "||", loc_lor);
  Hashtbl.add(env, "not", loc_lnot);
  Hashtbl.add(env, "!", loc_refnow);
  Hashtbl.add(env, "::", loc_cons);
  Hashtbl.add(env, "same", loc_same);
  Hashtbl.add(env, "string-sub", loc_stringsub);
  Hashtbl.add(env, "string-length", loc_stringlength);
  Hashtbl.add(env, "\\deeper", loc_deeper);
  Hashtbl.add(env, "deeper", loc_deeper);
  Hashtbl.add(env, "break", loc_break);
  Hashtbl.add(env, "soft-break", loc_softbreak);
  Hashtbl.add(env, "space", loc_space);
  Hashtbl.add(env, "arabic", loc_arabic);
  loc_plus[0] = lambdas(env, /* :: */[
        "~opl",
        /* :: */[
          "~opr",
          /* [] */0
        ]
      ], /* Plus */Block.__(33, [
          /* ContentOf */Block.__(12, ["~opl"]),
          /* ContentOf */Block.__(12, ["~opr"])
        ]));
  loc_minus[0] = lambdas(env, /* :: */[
        "~opl",
        /* :: */[
          "~opr",
          /* [] */0
        ]
      ], /* Minus */Block.__(34, [
          /* ContentOf */Block.__(12, ["~opl"]),
          /* ContentOf */Block.__(12, ["~opr"])
        ]));
  loc_mod[0] = lambdas(env, /* :: */[
        "~opl",
        /* :: */[
          "~opr",
          /* [] */0
        ]
      ], /* Mod */Block.__(32, [
          /* ContentOf */Block.__(12, ["~opl"]),
          /* ContentOf */Block.__(12, ["~opr"])
        ]));
  loc_times[0] = lambdas(env, /* :: */[
        "~opl",
        /* :: */[
          "~opr",
          /* [] */0
        ]
      ], /* Times */Block.__(30, [
          /* ContentOf */Block.__(12, ["~opl"]),
          /* ContentOf */Block.__(12, ["~opr"])
        ]));
  loc_divides[0] = lambdas(env, /* :: */[
        "~opl",
        /* :: */[
          "~opr",
          /* [] */0
        ]
      ], /* Divides */Block.__(31, [
          /* ContentOf */Block.__(12, ["~opl"]),
          /* ContentOf */Block.__(12, ["~opr"])
        ]));
  loc_concat[0] = lambdas(env, /* :: */[
        "~opl",
        /* :: */[
          "~opr",
          /* [] */0
        ]
      ], /* Concat */Block.__(4, [
          /* ContentOf */Block.__(12, ["~opl"]),
          /* ContentOf */Block.__(12, ["~opr"])
        ]));
  loc_equalto[0] = lambdas(env, /* :: */[
        "~opl",
        /* :: */[
          "~opr",
          /* [] */0
        ]
      ], /* EqualTo */Block.__(37, [
          /* ContentOf */Block.__(12, ["~opl"]),
          /* ContentOf */Block.__(12, ["~opr"])
        ]));
  loc_neq[0] = lambdas(env, /* :: */[
        "~opl",
        /* :: */[
          "~opr",
          /* [] */0
        ]
      ], /* LogicalNot */Block.__(40, [/* EqualTo */Block.__(37, [
              /* ContentOf */Block.__(12, ["~opl"]),
              /* ContentOf */Block.__(12, ["~opr"])
            ])]));
  loc_greaterthan[0] = lambdas(env, /* :: */[
        "~opl",
        /* :: */[
          "~opr",
          /* [] */0
        ]
      ], /* GreaterThan */Block.__(35, [
          /* ContentOf */Block.__(12, ["~opl"]),
          /* ContentOf */Block.__(12, ["~opr"])
        ]));
  loc_lessthan[0] = lambdas(env, /* :: */[
        "~opl",
        /* :: */[
          "~opr",
          /* [] */0
        ]
      ], /* LessThan */Block.__(36, [
          /* ContentOf */Block.__(12, ["~opl"]),
          /* ContentOf */Block.__(12, ["~opr"])
        ]));
  loc_geq[0] = lambdas(env, /* :: */[
        "~opl",
        /* :: */[
          "~opr",
          /* [] */0
        ]
      ], /* LogicalNot */Block.__(40, [/* LessThan */Block.__(36, [
              /* ContentOf */Block.__(12, ["~opl"]),
              /* ContentOf */Block.__(12, ["~opr"])
            ])]));
  loc_leq[0] = lambdas(env, /* :: */[
        "~opl",
        /* :: */[
          "~opr",
          /* [] */0
        ]
      ], /* LogicalNot */Block.__(40, [/* GreaterThan */Block.__(35, [
              /* ContentOf */Block.__(12, ["~opl"]),
              /* ContentOf */Block.__(12, ["~opr"])
            ])]));
  loc_land[0] = lambdas(env, /* :: */[
        "~opl",
        /* :: */[
          "~opr",
          /* [] */0
        ]
      ], /* LogicalAnd */Block.__(38, [
          /* ContentOf */Block.__(12, ["~opl"]),
          /* ContentOf */Block.__(12, ["~opr"])
        ]));
  loc_lor[0] = lambdas(env, /* :: */[
        "~opl",
        /* :: */[
          "~opr",
          /* [] */0
        ]
      ], /* LogicalOr */Block.__(39, [
          /* ContentOf */Block.__(12, ["~opl"]),
          /* ContentOf */Block.__(12, ["~opr"])
        ]));
  loc_lnot[0] = lambdas(env, /* :: */[
        "~op",
        /* [] */0
      ], /* LogicalNot */Block.__(40, [/* ContentOf */Block.__(12, ["~op"])]));
  loc_refnow[0] = lambdas(env, /* :: */[
        "~op",
        /* [] */0
      ], /* Reference */Block.__(23, [/* ContentOf */Block.__(12, ["~op"])]));
  loc_cons[0] = lambdas(env, /* :: */[
        "~opl",
        /* :: */[
          "~opr",
          /* [] */0
        ]
      ], /* ListCons */Block.__(7, [
          /* ContentOf */Block.__(12, ["~opl"]),
          /* ContentOf */Block.__(12, ["~opr"])
        ]));
  loc_same[0] = lambdas(env, /* :: */[
        "~stra",
        /* :: */[
          "~strb",
          /* [] */0
        ]
      ], /* PrimitiveSame */Block.__(41, [
          /* ContentOf */Block.__(12, ["~stra"]),
          /* ContentOf */Block.__(12, ["~strb"])
        ]));
  loc_stringsub[0] = lambdas(env, /* :: */[
        "~str",
        /* :: */[
          "~pos",
          /* :: */[
            "~wid",
            /* [] */0
          ]
        ]
      ], /* PrimitiveStringSub */Block.__(42, [
          /* ContentOf */Block.__(12, ["~str"]),
          /* ContentOf */Block.__(12, ["~pos"]),
          /* ContentOf */Block.__(12, ["~wid"])
        ]));
  loc_stringlength[0] = lambdas(env, /* :: */[
        "~str",
        /* [] */0
      ], /* PrimitiveStringLength */Block.__(43, [/* ContentOf */Block.__(12, ["~str"])]));
  loc_deeper[0] = lambdas(env, /* :: */[
        "~content",
        /* [] */0
      ], /* Concat */Block.__(4, [
          /* DeeperIndent */Block.__(3, [/* Concat */Block.__(4, [
                  /* SoftBreakAndIndent */3,
                  /* ContentOf */Block.__(12, ["~content"])
                ])]),
          /* SoftBreakAndIndent */3
        ]));
  loc_break[0] = /* BreakAndIndent */2;
  loc_softbreak[0] = /* SoftBreakAndIndent */3;
  loc_space[0] = /* StringConstant */Block.__(2, [" "]);
  loc_arabic[0] = lambdas(env, /* :: */[
        "~num",
        /* [] */0
      ], /* PrimitiveArabic */Block.__(44, [/* ContentOf */Block.__(12, ["~num"])]));
  return env;
}

exports.make_variant_environment = make_variant_environment;
exports.make_type_environment    = make_type_environment;
exports.make_environment         = make_environment;
/* dr Not a pure module */
