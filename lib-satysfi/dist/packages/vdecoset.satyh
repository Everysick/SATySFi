@require: gr

module VDecoSet : sig

  val empty : deco-set
  val simple-frame-stroke : length -> color -> deco-set
  val simple-frame : length -> color -> color -> deco-set

end = struct

  let empty =
    let deco _ _ _ _ = [] in
      (deco, deco, deco, deco)


  let simple-frame-stroke t color =
    let decoS (x, y) wid hgt dpt =
      [ stroke t color (Gr.rectangle (x, y -' dpt) (x +' wid, y +' hgt)); ]
    in
      (decoS, decoS, decoS, decoS)

  let simple-frame t scolor fcolor =
    let strokef = stroke t scolor in
    let gr-back x y w d h =
      fill fcolor (Gr.rectangle (x, y -' d) (x +' w, y +' h))
    in
    let decoS (x, y) w h d =
      [
        gr-back x y w d h;
        strokef (Gr.rectangle (x, y -' d) (x +' w, y +' h));
      ]
    in
    let decoH (x, y) w h d =
      [
        gr-back x y w d h;
        strokef (Gr.poly-line (x, y -' d) [(x, y +' h); (x +' w, y +' h); (x +' w, y -' d);])
      ]
    in
    let decoM (x, y) w h d =
      [
        gr-back x y w d h;
        strokef (Gr.line (x, y -' d) (x, y +' h));
        strokef (Gr.line (x +' w, y -' d) (x +' w, y +' h));
      ]
    in
    let decoT (x, y) w h d =
      [
        gr-back x y w d h;
        strokef (Gr.poly-line (x, y +' h) [(x, y -' d); (x +' w, y -' d); (x +' w, y +' h)])
      ]
    in
      (decoS, decoH, decoM, decoT)

end
