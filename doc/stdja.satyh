
module StdJa : sig

  val document : 'a -> block-text -> document
    constraint 'a :: (| title : inline-text; author : inline-text; |)

  val font-latin-italic : font
  direct +make-title : [] block-cmd
  direct +p : [inline-text] block-cmd
  direct +section : [inline-text; block-text] block-cmd
  direct \emph : [inline-text] inline-cmd

end = struct

  let font-size-normal  = 12pt
  let font-size-title   = 32pt
  let font-size-author  = 16pt
  let font-size-section = 18pt

  let font-ratio-latin = 1.
  let font-ratio-cjk = 0.88

  let font-latin-roman  = font `Arno`   font-ratio-latin 0.
  let font-latin-italic = font `ArnoIt` font-ratio-latin 0.
  let font-latin-sans   = font `Hlv`    font-ratio-latin 0.
  let font-cjk-mincho   = font `ipaexm` font-ratio-cjk   0.
  let font-cjk-gothic   = font `Osaka`  font-ratio-cjk   0.

  let set-cjk-font font ctx =
    ctx |> set-font HanIdeographic font
        |> set-font Kana           font

  let-mutable ref-title <- {}
  let-mutable ref-author <- {}

  let document rcd inner =
    let title = rcd#title in
    let author = rcd#author in
    let page = A4Paper in
    let pt = (80pt, 80pt) in
    let wid = 440pt in
    let hgt = 650pt in
    let ctx-doc =
      get-initial-context page pt wid hgt (command \math)
        |> set-dominant-wide-script Kana
        |> set-language Kana Japanese
        |> set-language HanIdeographic Japanese
        |> set-dominant-narrow-script Latin
        |> set-language Latin English
        |> set-font Kana           font-cjk-mincho
        |> set-font HanIdeographic font-cjk-mincho
        |> set-font Latin          font-latin-roman
        |> set-math-font `lmodern`
    in
    let () = ref-title <- title in
    let () = ref-author <- author in
    let bc = read-block ctx-doc inner in
      form-document ctx-doc bc

  let title-deco =
    let pads = (5pt, 5pt, 10pt, 10pt) in
    let deco (x, y) wid hgt dpt =
      let path1 =
        let cx = 14pt in
        let cy = 8pt in
        let xL = x in
        let xR = x +' wid in
        let yT = y +' hgt in
        let yB = y -' dpt in
          start-path (xL, yT)
            |> line-to (xR, yT)
            |> bezier-to (xR +' cx, yT -' cy) (xR +' cx, yB +' cy) (xR, yB)
            |> line-to (xL, yB)
            |> close-with-bezier (xL -' cx, yB +' cy) (xL -' cx, yT -' cy)
      in
      let path2 =
        let cx = 12pt in
        let cy = 8pt in
        let gapx = 3pt in
        let gapy = 5pt in
        let xL = x +' gapx in
        let xR = x +' wid -' gapx in
        let yT = y +' hgt -' gapy in
        let yB = y -' dpt +' gapy in
          start-path (xL, yT)
            |> line-to (xR, yT)
            |> bezier-to (xR +' cx, yT -' cy) (xR +' cx, yB +' cy) (xR, yB)
            |> line-to (xL, yB)
            |> close-with-bezier (xL -' cx, yB +' cy) (xL -' cx, yT -' cy)
      in
        [
          stroke 3pt Color.black path1;
          stroke 1pt Color.black path2;
        ]
    in
      (deco, deco, deco, deco)

  let-block ctx +make-title =
    let pads = (20pt, 20pt, 10pt, 10pt) in
    block-frame-breakable ctx pads title-deco (fun ctx -> (
      let ctx-title =
        ctx |> set-font-size font-size-title
            |> set-font Latin font-latin-roman
      in
      let ctx-author =
        ctx |> set-font-size font-size-author
            |> set-font Latin font-latin-roman
      in
      let ib-title = read-inline ctx-title (!ref-title) in
      let ib-line =
        let thk = 1pt in
        let wid = get-text-width ctx in
        let path (x, y) =
          start-path (x, y +' thk *' 0.5)
            |> line-to (x +' wid, y +' thk *' 0.5)
            |> terminate-path
        in
        inline-graphics wid thk 0pt (fun pt -> (
          [ stroke thk Color.black (path pt); ]
        ))
      in
      let ib-author = read-inline ctx-author (!ref-author) in
      let bb-title = form-paragraph ctx-title (inline-fil ++ ib-title ++ inline-fil) in
      let bb-line = form-paragraph ctx (ib-line ++ inline-fil) in
      let bb-author = form-paragraph ctx-author (inline-fil ++ ib-author) in
        bb-title +++ bb-line +++ bb-author
    ))


  let-mutable needs-indentation-ref <- true

  let-mutable num-section <- 0


  let quad-indent ctx =
    inline-skip (get-font-size ctx)


  let-block ctx +p inner =
    let needs-indentation =
      if !needs-indentation-ref then true else
        let () = needs-indentation-ref <- true in
          false
    in
    let ib-inner = read-inline ctx inner in
    let br-parag =
      if needs-indentation then
        (quad-indent ctx) ++ ib-inner ++ inline-fil
      else
        ib-inner ++ inline-fil
    in
      form-paragraph ctx br-parag


  let-block ctx +section title inner =
    let ctx-title =
      ctx |> set-font-size font-size-section
          |> set-font Latin font-latin-sans
          |> set-cjk-font font-cjk-gothic
    in
    let () = num-section <- !num-section + 1 in
    let () = needs-indentation-ref <- false in
    let br-num = read-inline ctx-title (embed-string ((arabic (!num-section)) ^ `.`)) in
    let br-title = read-inline ctx-title title in
    let bc-title = line-break true false ctx (br-num ++ (inline-skip 10pt) ++ br-title ++ (inline-fil)) in
    let bc-inner = read-block ctx inner in
      bc-title +++ bc-inner


  let-inline ctx \emph inner =
    let ctx-emph =
      ctx |> set-font Latin font-latin-italic
          |> set-cjk-font font-cjk-gothic
          |> set-text-color (CMYK(1., 0., 0., 0.))
    in
      read-inline ctx-emph inner

end