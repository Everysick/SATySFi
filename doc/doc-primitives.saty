% -*- coding: utf-8 -*-
StdJa.document (|
  title = {\SATySFi;プリミティヴ一覧};
  author = {Takashi SUWA};
|) '<
   +make-title;
   +section({基本演算})(
     let t-int-arith = tI --> (tI --> tI) in
     let t-int-comp  = tI --> (tI --> tB) in
     let t-bool-op = tB --> (tB --> tB) in
   '<
     +commands [`+`; `-`; `*`] (t-int-arith) {
       整数の加算・減算・乗算．
     }
     +commands [`/`; `mod`] (t-int-arith) {
       整数の除算と剰余．現在の仕様では，第2引数に ${0} を与えて評価した場合の結果は未定義．
       現在の実装では実行時エラーとなり処理を中止する．
       \subject-to-change;
     }
     +commands [`==`; `<>`; `<`; `>`; `<=`; `>=`] (t-int-comp) {
       整数の比較演算．
     }
     +commands [`&&`; `||`] (t-bool-op) {
       真偽値の連言・選言．
     }
     +commands [`not`] (tB --> tB) {
       論理否定．
     }
     +commands [`+.`; `-.`] (tF --> (tF --> tF)) {
       浮動小数点数の加算・減算．IEEE754に従う．
     }
     +commands [`+'`; `-'`] (tL --> (tL --> tL)) {
       長さの加算・減算．内部的にはPDFポイント単位の浮動小数点数で扱われ，IEEE754に従う．
     }
     +commands [`*'`] (tL --> (tF --> tL)) {
       長さのスカラー演算．
     }
     +commands [`/'`] (tL --> (tL --> tF)) {
       長さの割合．
     }
     +commands [`<'`; `>'`] (tL --> (tL --> tB)) {
       長さの比較．
     }
   >);
   +section {文字列演算} <
     +p {
       文字列操作のための簡単なプリミティヴがいくつか用意されているが，
       現状これらは開発初期の名残といった様相であり，使用は推奨しない．
       Unicode正規化の指定などはおろかUnicodeコードポイント単位の扱いをサポートせず，
       直接UTF-8バイト列を扱うなど，低級感が否めない．
     }
     +command (`string-same`) (tS --> (tS --> tB)) {
       文字列がUTF-8のバイト列として等価かの判定．
       \subject-to-change;\discouraged;
     }
     +command (`string-sub`) (tS --> (tI --> (tI --> tS))) {
       \code{\synt{string-sub} \meta{s} \meta{i} \meta{l}}で
       文字列\code{\meta{s}}の第\code{\meta{i}}番目の文字を先頭とする
       長さ\code{\meta{l}}の部分文字列を取り出す．
       最初の文字は0番目，また長さはUTF-8表現でのバイト長であって
       Unicodeコードポイントの個数ではないことに注意．
       \discouraged;
     }
   >
>
