
let ( --> ) m1 m2 =
  ${\paren{#m1 \to #m2}}

let type-name name =
  text-in-math MathOrd (fun ctx -> read-inline ctx name)


let tI = type-name {int}
let tB = type-name {bool}
let tF = type-name {float}
let tL = type-name {length}
let tS = type-name {string}
let tIT = type-name {inline-text}
let tIB = type-name {inline-boxes}
let tBT = type-name {block-text}
let tBB = type-name {block-boxes}
let tPADS = type-name {paddings}
let tDECO = type-name {deco}
let tDECOSET = type-name {deco-set}
let tCTX = type-name {context}
let tLIST m =
  let token = type-name {list} in
    ${\paren{#m}\text!{\ }#token}


let command-scheme ctx ib-name ty inner =
  let ib-colon = read-inline ctx {\ :\ } in
  let quad = inline-skip (ctx |> get-font-size) in
  let ib-inner = read-inline ctx inner in
  let m-ty = embed-math ctx ty in
    form-paragraph ctx (ib-name ++ ib-colon ++ m-ty ++ quad ++ ib-inner ++ inline-fil)


let name-context ctx =
  ctx |> set-dominant-narrow-script Latin
      |> set-font Latin (font `lmmono` 1. 0.)
      |> set-text-color Color.red


let-block ctx +command name ty inner =
  let ctx-name = name-context ctx in
  let ib-name = read-inline ctx-name (embed-string name) in
    command-scheme ctx ib-name ty inner


let-block ctx +commands namelst ty inner =
  let ctx-name = name-context ctx in
  let ib-comma = read-inline ctx {,\ } in
  let-mutable flag <- true in
  let ib-name =
    namelst |> List.fold-left (fun acc name -> (
      let ib-name = read-inline ctx-name (embed-string name) in
      if !flag then
        let () = flag <- false in
        acc ++ ib-name
      else
        acc ++ ib-comma ++ ib-name
    )) inline-nil
  in
    command-scheme ctx ib-name ty inner


let-inline \subject-to-change = {\emph{〔今後仕様変更の可能性あり〕}}

let-inline \discouraged = {\emph{〔使用非推奨〕}}


let-inline ctx \code inner =
  let pads-code = (2pt, 2pt, 2pt, 2pt) in
  let decoset-code = DecoSet.rectangle-round-fill 4pt 2pt (Color.gray 0.9) in
  let ib-frame =
    inline-frame-breakable pads-code decoset-code
      (read-inline (name-context ctx) inner)
  in
    script-guard Latin ib-frame


let-inline ctx \meta m =
  let ctx-meta =
    ctx |> set-text-color Color.orange
        |> set-font Latin StdJa.font-latin-italic
  in
    embed-math ctx-meta m
