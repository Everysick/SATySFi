let \settings = {
  \\usepackage\{amsmath\}
  \\usepackage\{amssymb\}
  \\usepackage[T1]\{fontenc\}
  \\usepackage\{lmodern\}
  \\usepackage[dvipdfmx]\{xcolor\}
  \\usepackage[dvipdfmx]\{graphicx\}
  \\usepackage\{tikz\}
  \\usepackage\{eclbkbox\}
  \\usepackage\{gfncls\}
  \\setsectiontheme\{line\}
  \\setlength\\parskip\{1zw\}
  \\usepackage\{mdframed\}
  \\mdfdefinestyle\{codebox\}\{\deeper{
    frametitlerule=true,
    frametitlefont=\\normalfont,
    frametitlebackgroundcolor=gray!20,
    linewidth=1pt
  }\}
}

let \version = {ver. 1.00 beta}

let \twitter-at-id at-id = `\texttt{@` ^ {\escape-for-latex{@at-id;}} ^ `}`

let \description dscr = {
  \\begin\{center\}\deeper{
    \\begin\{tabular\}\{ll\}
    \\hline\deeper(dscr-sep-lines dscr);\\hline
    \\end\{tabular\}
  }\\end\{center\}
}
and dscr-sep-lines dscr =
  if is-empty dscr then {} else
    let head = list-head dscr in
    let tail = list-tail dscr in
      head ^
      ( if is-empty tail then
          {\\\\}
        else
          {\\\\
            \\hline} ^ (dscr-sep-lines tail)
      )

let \d-item di dd = {@di; & @dd;}

let \synt synt = `\textcolor[rgb]{0,0,0.75}{\texttt{` ^ {\escape-for-latex{@synt;}} ^ `}}`

let \newword nw = {\\textsf\{@nw;\}}

% ---- tokens ----
let toksty tok = `\:\text{\textcolor{red}{$\underline{\text{\textbf{` ^ tok ^ `}}}$}}\:`
let vartoksty tok = `\:\text{\textcolor{orange}{$\underline{\text{\textit{\textbf{` ^ tok ^ `}}}}$}}\:`
let \token-eoi   = vartoksty `eoi`
let \token-cs    = vartoksty `cs`
let \token-id    = vartoksty `id`
let \token-class = vartoksty `class`
let \token-char  = vartoksty `char`
let \token-ident = vartoksty `ident`
let \token-int   = vartoksty `int`
let \token-varinstr = toksty `@`
let \token-bgrp  = toksty `\{`
let \token-egrp  = toksty `\}`
let \token-sep   = toksty `|`
let \token-end   = toksty `;`
let \token-space = toksty `space`
let \token-break = toksty `break`
%
let \token-lparen = toksty `(`
let \token-rparen = toksty `)`
let \token-blist  = toksty `[`
let \token-elist  = toksty `]`
let \token-listpunct = toksty `;`
let \token-bin    = vartoksty `bin`
let \token-let    = toksty `let`
let \token-and    = toksty `and`
let \token-defeq  = toksty `=`
let \token-in     = toksty `in`
let \token-if     = toksty `if`
let \token-then   = toksty `then`
let \token-else   = toksty `else`
let \token-finish = toksty `finish`
let \token-opnqt  = toksty ``l\`{} ``
let \token-clsqt  = toksty ``\`{ }l``
let \token-opnstr = toksty `t\{`
let \token-clsstr = toksty `\}t`
let \token-opnprog = toksty `e(`
let \token-clsprog = toksty `)e`
let \token-if-class-is-valid   = toksty `if-class-is-valid`
let \token-if-id-is-valid      = toksty `if-id-is-valid`
let \token-let-mutable         = toksty `let-mutable`
let \token-declare-global-hash = toksty `declare-global-hash`
let \token-renew  = toksty `renew`
let \token-owhash = toksty `$\leftarrow\!\!\!\leftarrow$`
let \token-function = toksty `function`
let \token-arrow  = toksty `$\rightarrow$`
let \token-oweq   = toksty `$\leftarrow$`
let \token-before = toksty `before`
let \token-while  = toksty `while`
let \token-do     = toksty `do`
let \token-true   = toksty `true`
let \token-false  = toksty `false`
let \token-unit   = toksty `()`
%
let \repeat-star inner = `\:\Bigl[` ^ inner ^ `\Bigr]^{*}\:`
let \repeat-plus inner = `\:\Bigl[` ^ inner ^ `\Bigr]^{+}\:`
let cfl-or-sub lst =
  if is-empty lst then {} else
    let hd = list-head lst in
    let tl = list-tail lst in
      hd ^ ( if is-empty tl then {} else {\|} ^ (cfl-or-sub tl) )

let \cfl-or lst = `\:(` ^ (cfl-or-sub lst) ^ `)\:`

let nontmsty nontm = `\:\langle{}\mathit{` ^ nontm ^ `}\rangle{}\:`
let \TopLevel = nontmsty `TopLevel`
let \Expr     = nontmsty `Expr`
let \Dec      = nontmsty `Dec`
let \Text     = nontmsty `Text`
let \Args     = nontmsty `Args`
let \Literal  = nontmsty `Literal`
let \Single   = nontmsty `Single`
let \ExprArgs = nontmsty `ExprArgs`
let \TextArgs = nontmsty `TextArgs`
let \GroupInText = nontmsty `GroupInText`
let \GroupInExpr = nontmsty `GroupInExpr`
%
let \math-dp-gather lst = {
  \\begin\{align*\}\deeper(sub-math-dp-gather lst);\\end\{align*\}
}
and sub-math-dp-gather lst =
  let head = list-head lst in
  let tail = list-tail lst in
    head ^ ( if is-empty tail then {} else {\\\\} ^ (sub-math-dp-gather tail) )

let \cfl nontm lst =
  if is-empty lst then {} else
    let head = list-head lst in
    let tail = list-tail lst in
      nontm ^ {\ } ^ `\rightarrow&\enskip` ^ {\ } ^ head ^ `\enskip` ^ (sub-cfl tail)

and sub-cfl lst =
  if is-empty lst then {} else
  ( let head = list-head lst in
    let tail = list-tail lst in
    ( if same head {*br*} then
        `\\&` ^ {\ }
      else
        `|\enskip` ^ {\ } ^ head ^ `\enskip` ^ {\ }
    ) ^ ( if is-empty tail then {} else {\ } ^ (sub-cfl tail) )
  )

let \code-dp code = {
  \\begin\{center\}\deeper{
    \\parbox\{0.9\\textwidth\}\{@code;\}
  }\\end\{center\}
}

let \code code = code

let \code-dp-break = {\\\\}

let \code-dp-tab = {\\\ \\\ }

let \meta metacode = {\\textcolor\{violet\}\{\\textit\{\\texttt\{@metacode;\}\}\}}

let \metadots = {$\\ldots$}

let \mcrd-display code = {
  %\\begin\{center\}\deeper{
    %\\parbox\{0.9\\textwidth\}\{\\noindent%
      %\\textcolor\{blue\}\{\\texttt\{
      %  \strong-escape-for-latex{@code;}
      %\}\}%
    %\}%
  %}\\end\{center\}
  \{\\small\\begin\{breakbox\}
    \\begin\{verbatim\}@code;\\end\{verbatim\}
  \\end\{breakbox\}\}\\noindent
}

let \mcrd-file name code =
    `\begin{mdframed}[style=codebox, frametitle={\texttt{` ^ {\escape-for-latex{@name;}} ^ `}}]`
  ^ `{\small\begin{verbatim}` ^ code ^ `\end{verbatim}}`
  ^ `\end{mdframed}`

let \mcrd code = {\synt{@code;}}

let \url-display url =
    `\begin{center}`
  ^ {\deeper(`\texttt{` ^ url ^ `}`);}
  ^ `\end{center}`

let \type-synt ty = `\textcolor[rgb]{0.75,0,0}{\texttt{` ^ ty ^ `}}`

let \mcrd-type code ty = {\synt{@code;}\ :\ \type-synt{@ty;}}
