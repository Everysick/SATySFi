let \settings = {
  \\usepackage\{amsmath\}
  \\usepackage\{amssymb\}
  \\usepackage[T1]\{fontenc\}
  \\usepackage\{lmodern\}
  \\usepackage[dvipdfmx]\{xcolor\}
  \\usepackage[dvipdfmx]\{graphicx\}
  \\usepackage\{tikz\}
  \\usepackage\{eclbkbox\}
  \\usepackage\{gfncls\}
  \\setsectiontheme\{line\}
  \\setlength\\parskip\{1zw\}
  \\usepackage\{mdframed\}
  \\mdfdefinestyle\{codebox\}\{\deeper{
    frametitlerule=true,
    frametitlefont=\\normalfont,
    frametitlebackgroundcolor=gray!20,
    linewidth=1pt
  }\}
} in
let \version = {ver. 1.00 beta} in
let \twitter-at-id at-id = `\texttt{@` ^ {\escape-for-latex{@at-id;}} ^ `}` in
let \description dscr = {
  \\begin\{center\}\deeper{
    \\begin\{tabular\}\{ll\}
    \\hline\deeper(dscr-sep-lines dscr);\\hline
    \\end\{tabular\}
  }\\end\{center\}
}
and dscr-sep-lines dscr =
  if is-empty dscr then {} else
    let head = list-head dscr in
    let tail = list-tail dscr in
      head ^
      ( if is-empty tail then
          {\\\\}
        else
          {\\\\
            \\hline} ^ (dscr-sep-lines tail)
      )
in
let \d-item di dd = {@di; & @dd;} in
let \synt synt = `\textcolor[rgb]{0,0,0.75}{\texttt{` ^ {\escape-for-latex{@synt;}} ^ `}}` in
let \newword nw = {\\textsf\{@nw;\}} in

% ---- tokens ----
let toksty tok = `\:\text{\textcolor{red}{$\underline{\text{\textbf{` ^ tok ^ `}}}$}}\:` in
let vartoksty tok = `\:\text{\textcolor{orange}{$\underline{\text{\textit{\textbf{` ^ tok ^ `}}}}$}}\:` in
let \token-eoi   = vartoksty `eoi`   in
let \token-cs    = vartoksty `cs`    in
let \token-id    = vartoksty `id`    in
let \token-class = vartoksty `class` in
let \token-char  = vartoksty `char`  in
let \token-ident = vartoksty `ident` in
let \token-int   = vartoksty `int`   in
let \token-varinstr = toksty `@`  in
let \token-bgrp  = toksty `\{`    in
let \token-egrp  = toksty `\}`    in
let \token-sep   = toksty `|`     in
let \token-end   = toksty `;`     in
let \token-space = toksty `space` in
let \token-break = toksty `break` in
%
let \token-lparen = toksty `(`      in
let \token-rparen = toksty `)`      in
let \token-blist  = toksty `[`      in
let \token-elist  = toksty `]`      in
let \token-listpunct = toksty `;`   in
let \token-bin    = vartoksty `bin` in
let \token-let    = toksty `let`    in
let \token-and    = toksty `and`    in
let \token-defeq  = toksty `=`      in
let \token-in     = toksty `in`     in
let \token-if     = toksty `if`     in
let \token-then   = toksty `then`   in
let \token-else   = toksty `else`   in
let \token-finish = toksty `finish` in
let \token-opnqt  = toksty ``l\`{} `` in
let \token-clsqt  = toksty ``\`{ }l`` in
let \token-opnstr = toksty `t\{` in
let \token-clsstr = toksty `\}t` in
let \token-opnprog = toksty `e(` in
let \token-clsprog = toksty `)e` in
let \token-if-class-is-valid   = toksty `if-class-is-valid`   in
let \token-if-id-is-valid      = toksty `if-id-is-valid`      in
let \token-let-mutable         = toksty `let-mutable`         in
let \token-declare-global-hash = toksty `declare-global-hash` in
let \token-renew  = toksty `renew`         in
let \token-owhash = toksty `$\leftarrow\!\!\!\leftarrow$`  in
let \token-function = toksty `function`    in
let \token-arrow  = toksty `$\rightarrow$` in
let \token-oweq   = toksty `$\leftarrow$`  in
let \token-before = toksty `before`        in
let \token-while  = toksty `while`         in
let \token-do     = toksty `do`            in
let \token-true   = toksty `true`          in
let \token-false  = toksty `false`         in
let \token-unit   = toksty `()`            in
%
let \repeat-star inner = `\:\Bigl[` ^ inner ^ `\Bigr]^{*}\:` in
let \repeat-plus inner = `\:\Bigl[` ^ inner ^ `\Bigr]^{+}\:` in
let cfl-or-sub lst =
  if is-empty lst then {} else
    let hd = list-head lst in
    let tl = list-tail lst in
      hd ^ ( if is-empty tl then {} else {\|} ^ (cfl-or-sub tl) )
in
let \cfl-or lst = `\:(` ^ (cfl-or-sub lst) ^ `)\:` in
let nontmsty nontm = `\:\langle{}\mathit{` ^ nontm ^ `}\rangle{}\:` in
let \Expr = nontmsty {Expr} in
let \Dec  = nontmsty {Dec}  in
let \Text = nontmsty {Text} in
let \Args = nontmsty {Args} in
let \Literal = nontmsty {Literal} in
let \Single = nontmsty {Single} in
let \ExprArgs = nontmsty {ExprArgs} in
let \TextArgs = nontmsty {TextArgs} in
let \GroupInText = nontmsty {GroupInText} in
let \GroupInExpr = nontmsty {GroupInExpr} in
%
let \math-dp-gather lst = {
  \\begin\{align*\}\deeper(sub-math-dp-gather lst);\\end\{align*\}
}
and sub-math-dp-gather lst =
  let head = list-head lst in
  let tail = list-tail lst in
    head ^ ( if is-empty tail then {} else {\\\\} ^ (sub-math-dp-gather tail) )
in
let \cfl nontm lst =
  if is-empty lst then {} else
    let head = list-head lst in
    let tail = list-tail lst in
      nontm ^ {\ } ^ `\rightarrow&\enskip` ^ {\ } ^ head ^ `\enskip` ^ (sub-cfl tail)
and sub-cfl lst =
  if is-empty lst then {} else
  ( let head = list-head lst in
    let tail = list-tail lst in
    ( if same head {*br*} then
        `\\&` ^ {\ }
      else
        `|\enskip` ^ {\ } ^ head ^ `\enskip` ^ {\ }
    ) ^ ( if is-empty tail then {} else {\ } ^ (sub-cfl tail) )
  )
in
let \code-dp code = {
  \\begin\{center\}\deeper{
    \\parbox\{0.9\\textwidth\}\{@code;\}
  }\\end\{center\}
} in
let \code code = code in
let \code-dp-break = {\\\\} in
let \code-dp-tab = {\\\ \\\ } in
let \meta metacode = {\\textcolor\{violet\}\{\\textit\{\\texttt\{@metacode;\}\}\}} in
let \metadots = {$\\ldots$} in
let \mcrd-display code = {
  %\\begin\{center\}\deeper{
    %\\parbox\{0.9\\textwidth\}\{\\noindent%
      %\\textcolor\{blue\}\{\\texttt\{
      %  \strong-escape-for-latex{@code;}
      %\}\}%
    %\}%
  %}\\end\{center\}
  \{\\small\\begin\{breakbox\}
    \\begin\{verbatim\}@code;\\end\{verbatim\}
  \\end\{breakbox\}\}\\noindent
} in
let \mcrd-file name code = {
  \\begin\{mdframed\}[style=codebox, frametitle=\{\\texttt\{\escape-for-latex{@name;}\}\}]
    \{\\small\\begin\{verbatim\}@code;\\end\{verbatim\}\}
  \\end\{mdframed\}
} in
let \mcrd code = {\synt{@code;}} in
let \url-display url = {\\begin\{center\}\deeper{\\texttt\{@url;\}}\\end\{center\}} in
let \type-synt ty = `\textcolor[rgb]{0.75,0,0}{\texttt{` ^ ty ^ `}}` in
let \mcrd-type code ty = {\synt{@code;}\ :\ \type-synt{@ty;}} in
  finish
